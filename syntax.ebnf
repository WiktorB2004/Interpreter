(* WLang syntax in EBNF *)
<program> ::= { <statement> }
<statement> ::= <assignment> | <if_statement> | <print_statement>
<assignment> ::= <variable_type> <identifier> "=" (<expression> | <list>) ";"
<variable_type> ::= "int" | "float" | "char" | "string" | "bool"
<list> ::= "[" [ <expression> { "," <expression> } ] "]"
<function_declaration> ::= "DEF" <identifier> "->" <function_type> "(" [ <parameter_list> ] ")" "{" <function_body> "}"
<function_type> ::= variable_type | "void"
<parameter_list> ::= <identifier> { "," <identifier> }
<function_body> ::= { <statement> }
<if_statement> ::= "IF" <condition> "THEN" <program> "ENDIF" [ "ELSE" <program> "ENDIF" ]
<print_statement> ::= "PRINT" <expression> ";"
<while_loop> ::= "WHILE" <condition> "DO" <program> "ENDWHILE"
<condition> ::= <logical_term> { <logical_operator> <logical_term> }
<logical_term> ::= <expression> <relational_operator> <expression> | "(" <condition> ")" | "!" <logical_term>
<logical_operator> ::= "&&" | "||"
<relational_operator> ::= "==" | "!=" | "<" | ">" | "<=" | ">="
<expression> ::= <term> { ("+" | "-") <term> }
<term> ::= <factor> { ("*" | "/") <factor> }
<factor> ::= <identifier> | <number> | "(" <expression> ")"
<identifier> ::= letter { letter | digit }
<number> ::= digit { digit }
letter ::= "a" | "b" | "c" | ... | "z" | "A" | "B" | ... | "Z"
digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"